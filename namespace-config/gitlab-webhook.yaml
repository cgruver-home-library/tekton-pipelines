apiVersion: redhatcop.redhat.io/v1alpha1
kind: NamespaceConfig
metadata:
  name: tekton-pipeline-gitlab
spec:
  labelSelector:
    matchLabels:
      tekton-gitlab: ""
  templates:
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: create-trigger
        namespace: {{ .Name }}
      spec:
        params:
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-branch
          type: string
          description: "Git Branch to monitor"
          default: "main"
        - name: build-type
          type: string
          description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
          default: "quarkus-fast-jar"
        - name: deploy-type
          type: string
          description: "Pipeline to run: rolling-replace, blue-green, simple"
          default: "rolling-replace"
        volumes:
        - name: trigger-template
          configMap:
            name: trigger-template
        - name: gitlab-secret
          secret:
            secretName: gitlab-secret
        steps:
        - name: create-trigger
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          workingDir: /workspace
          script: |
            echo "Creating Application Resources"
            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            oc process --local -f /workspace/templates/gitlab-trigger-template.yaml -p APP_NAME=${APP_NAME} -p GIT_REPOSITORY=$(params.git-repo-url) -p GIT_BRANCH=$(params.git-branch) -p BUILD_TYPE=$(params.build-type) -p DEPLOY_TYPE=$(params.deploy-type) | oc apply -f -
            sleep 5
          volumeMounts:
          - name: trigger-template
            mountPath: /workspace/templates
        - name: create-route
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: gitlab-secret
            mountPath: /var/secret
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace"
          script: |
            echo -----------------------------------
            echo "Creating Route for Event Listener"
            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            SVC_NAME=$(oc get el ${APP_NAME}-listener -o=jsonpath='{.status.configuration.generatedName}')
            oc expose service ${SVC_NAME}
            echo $(oc get route ${SVC_NAME} -o=jsonpath='{.spec.host}') > /workspace/hook-url
            echo -----------------------------------
        - name: create-webhook
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: gitlab-secret
            mountPath: /var/secret
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace"
          script: |
            echo -----------------------------------
            echo "Creating Webhook"
            TEST=$(echo $(params.git-repo-url) | cut -d'@' -f1)
            if [[ $TEST == "git" ]]
            then
              PROJECT_PATH=$(echo $(params.git-repo-url) | cut -d":" -f2 | cut -d"." -f1 | sed "s|/|%2F|g")
              API_URL=http://$(echo $(params.git-repo-url) | cut -d"@" -f2 | cut -d":" -f1):8181/api/v4/projects/${PROJECT_PATH}/hooks
            else
              PROJECT_PATH=$(echo $(params.git-repo-url) | cut -d"/" -f4- | cut -d"." -f1 | sed "s|/|%2F|g")
              API_URL=$(echo $(params.git-repo-url) | cut -d"/" -f-3)/api/v4/projects/${PROJECT_PATH}/hooks
            fi
            HOOK_URL=http://$(cat /workspace/hook-url)
            curl -X POST -H "PRIVATE-TOKEN: $(cat /var/secret/access-token)" -d "push_events=true" -d "push_events_branch_filter=$(params.git-branch)" -d "token=$(cat /var/secret/hook-token)" -d "url=${HOOK_URL}" -d "enable_ssl_verification=false" ${API_URL}
            echo -----------------------------------
        - name: create-initial-pipeline-run
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          workingDir: /workspace
          script: |
            echo "Creating Application Resources"
            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            oc process --local -f /workspace/templates/initial-pipeline-run.yaml -p APP_NAME=${APP_NAME} -p GIT_REPOSITORY=$(params.git-repo-url) -p GIT_BRANCH=$(params.git-branch) -p BUILD_TYPE=$(params.build-type) -p DEPLOY_TYPE=$(params.deploy-type) | oc apply -f -
          volumeMounts:
          - name: trigger-template
            mountPath: /workspace/templates

  - objectTemplate: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: trigger-template
        namespace: {{ .Name }}
      data:
        initial-pipeline-run.yaml: |
          apiVersion: template.openshift.io/v1
          kind: Template
          metadata:
            annotations:
              template.openshift.io/bindable: "false"
            name: pipeline-run
          objects:
            - apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                name: ${APP_NAME}-initial-pipeline-run
              spec:
                serviceAccountName: pipeline
                pipelineRef: 
                  name: build-and-deploy-java
                params:
                - name: build-type
                  value: ${BUILD_TYPE}
                - name: deploy-type
                  value: ${DEPLOY_TYPE}
                - name: git-repo-url
                  value: ${GIT_REPOSITORY}
                - name: git-checkout
                  value: ${GIT_BRANCH}
                - name: clone-type
                  value: branch
                - name: config-git-path
                  value: deploy-config

          parameters:
            -
              name: APP_NAME
              required: true
            -
              name: GIT_REPOSITORY
              required: true
            -
              name: GIT_BRANCH
              required: true
              value: "main"
            - 
              name: BUILD_TYPE
              required: true
            -
              name: DEPLOY_TYPE
              required: true
              value: "rolling-replace"
            - 
              name: CONFIG_PATH
              required: true
              value: "/deploy-config"

        gitlab-trigger-template.yaml: |
          apiVersion: template.openshift.io/v1
          kind: Template
          metadata:
            annotations:
              template.openshift.io/bindable: "false"
            name: gitlab-tekton-trigger
          objects:
            - apiVersion: triggers.tekton.dev/v1alpha1
              kind: TriggerTemplate
              metadata:
                name: ${APP_NAME}
              spec:
                params:
                  - name: git-checkout-sha
                    description: The git SHA to checkout
                    default: main
                  - name: git-repo-url
                    description: The git repository url
                  - name: config-git-path
                    description: "Git repository path for application configuration"
                resourcetemplates:
                  - apiVersion: tekton.dev/v1beta1
                    kind: PipelineRun
                    metadata:
                      name: ${APP_NAME}-$(uid)
                    spec:
                      serviceAccountName: pipeline
                      pipelineRef: 
                        name: build-and-deploy-java
                      params:
                      - name: build-type
                        value: ${BUILD_TYPE}
                      - name: deploy-type
                        value: ${DEPLOY_TYPE}
                      - name: git-repo-url
                        value: $(tt.params.git-repo-url)
                      - name: git-checkout
                        value: $(tt.params.git-checkout-sha)
                      - name: clone-type
                        value: "sha"
                      - name: config-git-path
                        value: $(tt.params.config-git-path)

            - apiVersion: triggers.tekton.dev/v1alpha1
              kind: TriggerBinding
              metadata:
                name: ${APP_NAME}
              spec:
                params:
                  - name: git-checkout-sha
                    value: "$(body.checkout_sha)"
                  - name: git-repo-url
                    value: "$(body.repository.git_ssh_url)"
                  - name: config-git-path
                    value: "${CONFIG_PATH}"

            - apiVersion: triggers.tekton.dev/v1alpha1
              kind: EventListener
              metadata:
                name: ${APP_NAME}-listener
              spec:
                serviceAccountName: pipeline
                triggers:
                  - bindings:
                    - ref: ${APP_NAME}
                    template:
                      name: ${APP_NAME}

          parameters:
            -
              name: APP_NAME
              required: true
            -
              name: GIT_REPOSITORY
              required: true
            -
              name: GIT_BRANCH
              required: true
              value: "main"
            - 
              name: BUILD_TYPE
              required: true
            -
              name: DEPLOY_TYPE
              required: true
              value: "rolling-replace"
            - 
              name: CONFIG_PATH
              required: true
              value: "/deploy-config"

