apiVersion: redhatcop.redhat.io/v1alpha1
kind: NamespaceConfig
metadata:
  name: tekton-pipeline-java
spec:
  labelSelector:
    matchLabels:
      tekton-java: ""
  templates:
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: build-java
        namespace: {{ .Name }}
      spec:
        stepTemplate:
          volumeMounts:
          - name: varlibc
            mountPath: /var/lib/containers
          - name: maven-settings
            mountPath: /tmp/maven-settings
        params:
        - name: build-type
          type: string
          description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-checkout
          type: string
          description: "Git code to checkout, either a branch name or a commit sha.  Determined by the value of clone-type"
        - name: clone-type
          type: string
          description: "The type of git clone: sha, branch"
          default: "branch"
        - name: tlsVerify
          description: tls verify
          type: string
          default: "false"
        steps:
        - name: prep-build
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          script: |
            case $(params.clone-type) in
              sha)
                mkdir -p /workspace/source
                cd /workspace/source
                git init
                git remote add origin $(params.git-repo-url)
                git pull origin $(params.git-checkout)
                echo "$(params.git-checkout)" > /workspace/git-sha.out
              ;;
              branch)
                git clone -b $(params.git-checkout) --single-branch $(params.git-repo-url) /workspace/source
                cd /workspace/source
                echo "$(git rev-parse HEAD)" > /workspace/git-sha.out
              ;;
            esac
            cp /tmp/maven-settings/settings.xml /workspace/source
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/"
        - name: build-sources
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          script: |
            MVN_ARGS="-DskipTests -Dmaven.wagon.http.ssl.insecure=true -ssettings.xml -DappName=app"
            case $(params.build-type) in
              spring-boot)
              ;;
              quarkus-jvm)
              ;;
              quarkus-fast-jar)
              MVN_ARGS="${MVN_ARGS} -Dquarkus.package.type=fast-jar"
              ;;
              quarkus-native)
              MVN_ARGS="${MVN_ARGS} -Pnative"
              ;;
            esac
            mvn ${MVN_ARGS} clean package
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace/source"
        - name: build-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:nonroot
          imagePullPolicy: Always
          script: |
            echo "tekton:x:$(id -u):$(id -g):tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
            echo $(id -u):1100000000:65536 >> /etc/subuid
            echo $(id -u):1100000000:65536 >> /etc/subgid
            export BUILDAH_ISOLATION=chroot
            mkdir -p ${HOME}/.config/containers
            echo "[storage]" > ${HOME}/.config/containers/storage.conf
            echo "driver=\"vfs\"" >> ${HOME}/.config/containers/storage.conf
            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            SHA=$(cat /workspace/git-sha.out)
            DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/${APP_NAME}:${SHA:0:7}"
            if [[ $(params.build-type) == "quarkus-native" ]]
            then
              CONTAINER=$(buildah --tls-verify=$(params.tlsVerify) from image-registry.openshift-image-registry.svc:5000/openshift/ubi-minimal:latest)
            else
              CONTAINER=$(buildah --tls-verify=$(params.tlsVerify) from image-registry.openshift-image-registry.svc:5000/openshift/jdk-11-app-runner:latest )
            fi
            case $(params.build-type) in
              spring-boot)
              buildah copy ${CONTAINER} ./target/app.jar /deployments/app.jar
              ;;
              quarkus-jvm)
              buildah copy ${CONTAINER} ./target/lib/* /deployments/lib/
              buildah copy ${CONTAINER} ./target/app-runner.jar /deployments/app.jar
              ;;
              quarkus-fast-jar)
              buildah copy ${CONTAINER} ./target/quarkus-app/lib/ /deployments/lib/
              buildah copy ${CONTAINER} ./target/quarkus-app/quarkus-run.jar /deployments/app.jar
              buildah copy ${CONTAINER} ./target/quarkus-app/app/ /deployments/app/
              buildah copy ${CONTAINER} ./target/quarkus-app/quarkus/ /deployments/quarkus/
              ;;
              quarkus-native)
              buildah copy ${CONTAINER} ./target/app-runner /application
              buildah config --entrypoint '["/application", "-Dquarkus.http.host=0.0.0.0", "${JAVA_OPTIONS}"]' --port 8080 ${CONTAINER}
            esac
            buildah config --label GIT_COMMIT=${SHA} --author="Tekton" ${CONTAINER}
            buildah config --label GIT_URL=$(params.git-repo-url) ${CONTAINER}
            buildah commit ${CONTAINER} ${DESTINATION_IMAGE}
            buildah unmount ${CONTAINER}
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace/source"
        - name: push-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:nonroot
          imagePullPolicy: Always
          script: |
            echo "tekton:x:$(id -u):$(id -g):tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
            export BUILDAH_ISOLATION=chroot
            SHA=$(cat /workspace/git-sha.out)
            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/${APP_NAME}"
            buildah push --tls-verify=$(params.tlsVerify) ${DESTINATION_IMAGE}:${SHA:0:7} docker://${DESTINATION_IMAGE}:${SHA:0:7}
            buildah push --tls-verify=$(params.tlsVerify) ${DESTINATION_IMAGE}:${SHA:0:7} docker://${DESTINATION_IMAGE}:latest
          workingDir: "/workspace/source"
        volumes:
        - name: varlibc
          emptyDir: {}
        - name: maven-settings
          configMap:
            name: maven-settings-xml


  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: deploy-rolling-replace
        namespace: {{ .Name }}
      spec:
        params:
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-checkout
          type: string
          description: "Git code to checkout, either a branch name or a commit sha.  Determined by the value of clone-type"
        - name: clone-type
          type: string
          description: "The type of git clone: sha, branch"
          default: "branch"
        - name: config-git-path
          type: string
          description: "Config Git Path"
          default: "/deploy-config"
        volumes:
        - name: app-deployment-template
          configMap:
            name: app-deployment-template
        steps:
        - name: prep-config
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          script: |
            case $(params.clone-type) in
              sha)
                mkdir -p /workspace/source
                cd /workspace/source
                git init
                git remote add origin $(params.git-repo-url)
                git pull origin $(params.git-checkout)
                echo "$(params.git-checkout)" > /workspace/git-sha.out
              ;;
              branch)
                git clone -b $(params.git-checkout) --single-branch $(params.git-repo-url) /workspace/source
                cd /workspace/source
                echo "$(git rev-parse HEAD)" > /workspace/git-sha.out
              ;;
            esac
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/"
        - name: create-deployment
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          workingDir: /workspace/source
          volumeMounts:
          - name: app-deployment-template
            mountPath: /workspace/templates
          script: |
            #!/bin/bash
            set -x 

            function deploy() {
              echo -----------------------------------
              echo "Creating Deployment"
              oc process --local -f /workspace/templates/app-service.yaml -p APP_NAME=${APP_NAME} | oc apply -n $(context.taskRun.namespace) -f -
              oc process --local -f /workspace/templates/app-deployment-template.yaml -p APP_NAME=${APP_NAME} -p DEPLOY_NAME=${DEPLOY_NAME} | oc apply -n $(context.taskRun.namespace) -f -
              echo -----------------------------------
              echo "Applying artifacts in $(params.config-git-path)/apply directory"
              for i in $(ls ./$(params.config-git-path)/apply)
              do
                sed -i "s|--DEPLOY_NAME--|${DEPLOY_NAME}|g" ./$(params.config-git-path)/apply/${i}
                sed -i "s|--APP_NAME--|${APP_NAME}|g" ./$(params.config-git-path)/apply/${i}
              done
              oc apply -f ./$(params.config-git-path)/apply
              echo -----------------------------------
              echo "Setting deployment image path"
              echo -----------------------------------
              DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/${APP_NAME}:${SHA:0:7}"
              oc set image deployment/${DEPLOY_NAME} ${DEPLOY_NAME}=${DESTINATION_IMAGE}
              if [ -f ./$(params.config-git-path)/patch/deployment-patch.yaml ]
              then
                echo -----------------------------------
                echo "Patching deployment"
                echo -----------------------------------
                sed -i "s|--DEPLOY_NAME--|${DEPLOY_NAME}|g" ./$(params.config-git-path)/patch/deployment-patch.yaml
                sed -i "s|--APP_NAME--|${APP_NAME}|g" ./$(params.config-git-path)/patch/deployment-patch.yaml
                oc patch deployment ${DEPLOY_NAME} --patch "$(cat ./$(params.config-git-path)/patch/deployment-patch.yaml)"
              fi
              echo -----------------------------------
            }

            function verifyDeployment() {
              echo -----------------------------------
              echo "Make sure that the new deployment is running, give it 60 seconds to start"
              DONE="FALSE"
              let i=1
              while [[ ${DONE} == "FALSE" ]]
              do
                DESIRED_REPLICAS=$(oc get deployment --selector app=${APP_NAME},version=${DEPLOY_NAME} -o jsonpath='{ .items[0].status.replicas}')
                READY_REPLICAS=$(oc get deployment --selector app=${APP_NAME},version=${DEPLOY_NAME} -o jsonpath='{ .items[0].status.readyReplicas}')
                if [[ ${DESIRED_REPLICAS} == "" ]]
                then
                  echo "Waiting for deployment to complete..."
                elif [[ ${DESIRED_REPLICAS} == ${READY_REPLICAS} ]]
                then
                  DONE="TRUE"
                  RUNNING="TRUE"
                fi
                if [[ ${i} == 60 ]]
                then
                  DONE="TRUE"
                fi
                sleep 1
                let i=i+1
              done
              echo -----------------------------------
            }

            echo -----------------------------------
            echo "Beginning Application Rollout"

            APP_NAME=$(basename $(params.git-repo-url) | cut -d'.' -f1)
            SHA=$(cat /workspace/git-sha.out)
            DEPLOY_NAME="${APP_NAME}-${SHA:0:7}"
            RUNNING="FALSE"
            
            deploy
            verifyDeployment
            if [[ ${RUNNING} == "FALSE" ]]
            then
              echo "Application failed to start! Rolling Back"
              oc process --local -f /workspace/templates/app-deployment-template.yaml -p APP_NAME=${APP_NAME} -p DEPLOY_NAME=${DEPLOY_NAME} | oc delete -n $(context.taskRun.namespace) -f -
              exit 1
            fi
            echo "Remove Old Deployment artifacts"
            oc delete deployment --selector app=${APP_NAME},previous="" -n $(context.taskRun.namespace) 
            oc delete configmap --selector app=${APP_NAME},previous="" -n $(context.taskRun.namespace)
            oc delete secret --selector app=${APP_NAME},previous="" -n $(context.taskRun.namespace) 
            echo -----------------------------------
            echo "Label Previous Deployment artifacts"
            oc label deployment --selector app=${APP_NAME},latest="" -n $(context.taskRun.namespace) previous="" latest-
            oc label configmap --selector app=${APP_NAME},latest="" -n $(context.taskRun.namespace) previous="" latest-
            oc label secret --selector app=${APP_NAME},latest="" -n $(context.taskRun.namespace) previous="" latest-
            echo -----------------------------------
            echo "Label New Deployment"
            oc label deployment --selector app=${APP_NAME},version=${DEPLOY_NAME},new-deploy="" -n $(context.taskRun.namespace) latest="" new-deploy- previous-
            oc label configmap --selector app=${APP_NAME},version=${DEPLOY_NAME} -n $(context.taskRun.namespace) latest="" previous-
            oc label secret --selector app=${APP_NAME},version=${DEPLOY_NAME} -n $(context.taskRun.namespace) latest="" previous-
            echo -----------------------------------
            echo "Scale Down Previous Deployment"
            oc scale deployment --selector app=${APP_NAME},previous="" -n $(context.taskRun.namespace) --replicas=0
            echo -----------------------------------


  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: build-and-deploy-java
        namespace: {{ .Name }}
      spec:
        params:
        - name: build-type
          type: string
          description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
        - name: deploy-type
          type: string
          description: "Selected deploy type: rolling-replace, blue-green, simple"
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-checkout
          type: string
          description: "Git code to checkout, either a branch name or a commit sha.  Determined by the value of clone-type"
          default: "main"
        - name: clone-type
          type: string
          description: "The type of git clone: sha, branch"
          default: "branch"
        - name: config-git-path
          type: string
          description: "Config Git Path"
          default: "/deploy-config"
        tasks:
        - name: build
          taskRef:
            name: build-java
          params:
          - name: build-type
            value: $(params.build-type)
          - name: git-repo-url
            value: $(params.git-repo-url)
          - name: git-checkout
            value: $(params.git-checkout)
          - name: clone-type
            value: $(params.clone-type)
        - name: deploy-rolling-replace
          taskRef:
            name: deploy-rolling-replace
          runAfter:
          - build
          when:
          - input: "$(params.deploy-type)"
            operator: in
            values: ["rolling-replace"]
          params:
          - name: git-repo-url
            value: $(params.git-repo-url)
          - name: git-checkout
            value: $(params.git-checkout)
          - name: clone-type
            value: $(params.clone-type)
          - name: config-git-path
            value: $(params.config-git-path)


  - objectTemplate: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: app-deployment-template
        namespace: {{ .Name }}
      data:
        app-service.yaml: |
          apiVersion: template.openshift.io/v1
          kind: Template
          metadata:
            annotations:
              template.openshift.io/bindable: "false"
            name: create-service
          objects:
            - apiVersion: v1
              kind: Service
              metadata:
                annotations:
                  description: ${APP_NAME} Port 8080 Service.
                labels:
                  app: "${APP_NAME}"
                name: ${APP_NAME}
              spec:
                ports:
                - name: 8080-tcp
                  port: 8080
                  protocol: TCP
                  targetPort: 8080
                selector:
                  app: "${APP_NAME}"
          parameters:
            -
              name: APP_NAME
              required: true

        app-deployment-template.yaml: |
          apiVersion: template.openshift.io/v1
          kind: Template
          metadata:
            annotations:
              template.openshift.io/bindable: "false"
            name: create-deployment
          objects:
            - apiVersion: apps/v1
              kind: Deployment
              metadata:
                annotations:
                  description: ${DEPLOY_NAME} Deployment.
                labels:
                  app: "${APP_NAME}"
                  version: "${DEPLOY_NAME}"
                  new-deploy: ""
                name: ${DEPLOY_NAME}
              spec:
                replicas: 0
                selector:
                  matchLabels:
                    version: "${DEPLOY_NAME}"
                strategy:
                  type: RollingUpdate
                  RollingUpdate:
                    maxSurge: 25%
                    maxUnavailable: 25%
                template:
                  metadata:
                    labels:
                      app: "${APP_NAME}"
                      version: "${DEPLOY_NAME}"
                    name: ${DEPLOY_NAME}
                  spec:
                    initContainers:
                    - args:
                        - '-c'
                        - >-
                          cd /tmp && csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}'
                          && for file in crt-*; do keytool -import -noprompt -keystore
                          $truststore_jks -file $file -storepass $password -alias
                          service-$file; done
                      command:
                        - /bin/bash
                      env:
                        - name: ca_bundle
                          value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                        - name: truststore_jks
                          value: /var/run/secrets/java.io/keystores/truststore.jks
                        - name: password
                          value: changeit
                      image: 'image-registry.openshift-image-registry.svc:5000/openshift/jdk-11-app-runner:latest'
                      imagePullPolicy: IfNotPresent
                      name: pem-to-truststore
                      resources: {}
                      terminationMessagePath: /dev/termination-log
                      terminationMessagePolicy: File
                      volumeMounts:
                        - mountPath: /var/run/secrets/java.io/keystores
                          name: keystore-volume
                    containers: 
                    - env:
                      - name: JAVA_OPTIONS
                        value: '-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djavax.net.ssl.trustStore=/var/run/secrets/java.io/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit'
                      image: ${DEPLOY_NAME}
                      imagePullPolicy: IfNotPresent
                      name: ${DEPLOY_NAME}
                      ports:
                      - containerPort: 8778
                        name: jolokia
                        protocol: TCP
                      - containerPort: 8080
                        name: http
                        protocol: TCP
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                      volumeMounts:
                      - mountPath: /var/run/secrets/java.io/keystores
                        name: keystore-volume
                      readinessProbe:
                        failureThreshold: 3
                        httpGet:
                          path: /
                          port: 8080
                          scheme: HTTP
                        periodSeconds: 20
                        successThreshold: 1
                        timeoutSeconds: 1
                      livenessProbe:
                        failureThreshold: 10
                        httpGet:
                          path: /
                          port: 8080
                          scheme: HTTP
                        periodSeconds: 20
                        successThreshold: 1
                        timeoutSeconds: 1
                    terminationGracePeriodSeconds: 5
                    volumes:
                    - emptyDir: {}
                      name: keystore-volume

          parameters:
            -
              name: APP_NAME
              required: true
            -
              name: DEPLOY_NAME
              required: true
