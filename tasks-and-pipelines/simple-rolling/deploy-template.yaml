apiVersion: v1
kind: ConfigMap
metadata:
  name: app-resources-template
  namespace: {{ .Name }}
data:
  app-resources-template.yaml: |
    apiVersion: template.openshift.io/v1
    kind: Template
    metadata:
      annotations:
        template.openshift.io/bindable: "false"
      name: create-app-resources
    objects:
      - apiVersion: v1
        kind: ImageStream
        metadata:
          labels:
            app: "${APP_NAME}"
          name: "${APP_NAME}"
        spec:
          lookupPolicy:
            local: false

      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            description: ${APP_NAME} Port 8080 Service.
          labels:
            app: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
          selector:
            app: ${APP_NAME}

      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          annotations:
            description: ${APP_NAME} Deployment.
          labels:
            app: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          replicas: 0
          selector:
            matchLabels:
              app: ${APP_NAME}
          strategy:
            type: RollingUpdate
            RollingUpdate:
              maxSurge: 25%
              maxUnavailable: 25%
          template:
            metadata:
              labels:
                app: ${APP_NAME}
              name: ${APP_NAME}
            spec:
              initContainers:
              - args:
                  - '-c'
                  - >-
                    cd /tmp && csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}'
                    && for file in crt-*; do keytool -import -noprompt -keystore
                    $truststore_jks -file $file -storepass $password -alias
                    service-$file; done
                command:
                  - /bin/bash
                env:
                  - name: ca_bundle
                    value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                  - name: truststore_jks
                    value: /var/run/secrets/java.io/keystores/truststore.jks
                  - name: password
                    value: changeit
                image: 'image-registry.openshift-image-registry.svc:5000/openshift/jdk-11-app-runner:latest'
                imagePullPolicy: IfNotPresent
                name: pem-to-truststore
                resources: {}
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
                volumeMounts:
                  - mountPath: /var/run/secrets/java.io/keystores
                    name: keystore-volume
              containers: 
              - env:
                - name: JAVA_OPTIONS
                  value: '-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djavax.net.ssl.trustStore=/var/run/secrets/java.io/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit'
                envFrom:
                - configMapRef:
                    name: ${APP_NAME} 
                - secretRef:
                    name: ${APP_NAME}
                image: ${APP_NAME}
                imagePullPolicy: IfNotPresent
                name: ${APP_NAME}
                ports:
                - containerPort: 8778
                  name: jolokia
                  protocol: TCP
                - containerPort: 8080
                  name: http
                  protocol: TCP
                - containerPort: 8443
                  name: https
                  protocol: TCP
                volumeMounts:
                - mountPath: /var/run/secrets/java.io/keystores
                  name: keystore-volume
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /
                    port: 8080
                    scheme: HTTP
                  periodSeconds: 20
                  successThreshold: 1
                  timeoutSeconds: 1
                livenessProbe:
                  failureThreshold: 10
                  httpGet:
                    path: /
                    port: 8080
                    scheme: HTTP
                  periodSeconds: 20
                  successThreshold: 1
                  timeoutSeconds: 1
              terminationGracePeriodSeconds: 5
              volumes:
              - emptyDir: {}
                name: keystore-volume

      - apiVersion: triggers.tekton.dev/v1alpha1
        kind: TriggerTemplate
        metadata:
          name: ${APP_NAME}
        spec:
          params:
            - name: git-checkout-sha
              description: The git SHA to checkout
              default: main
            - name: git-repo-url
              description: The git repository url
            - name: config-git-repo-url
              description: "Git repository for application configuration"
            - name: config-git-branch
              description: "Git repository branch for application configuration"
            - name: config-git-path
              description: "Git repository path for application configuration"
            - name: app-name
              description: "The application name"
          resourcetemplates:
            - apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                name: ${APP_NAME}-$(uid)
              spec:
                serviceAccountName: pipeline
                pipelineRef: 
                  name: build-and-deploy-java-cloud-native
                params:
                - name: app-name
                  value: $(tt.params.app-name)
                - name: build-type
                  value: ${BUILD_TYPE}
                - name: git-repo-url
                  value: $(tt.params.git-repo-url)
                - name: git-checkout-sha
                  value: $(tt.params.git-checkout-sha)
                - name: config-git-repo-url
                  value: $(tt.params.config-git-repo-url)
                - name: config-git-branch
                  value: $(tt.params.config-git-branch)
                - name: config-git-path
                  value: $(tt.params.config-git-path)

      - apiVersion: triggers.tekton.dev/v1alpha1
        kind: TriggerBinding
        metadata:
          name: ${APP_NAME}
        spec:
          params:
            - name: git-checkout-sha
              value: "$(body.checkout_sha)"
            - name: app-name
              value: ${APP_NAME}
            - name: git-repo-url
              value: "$(body.repository.git_ssh_url)"
            - name: config-git-repo-url
              value: ${GIT_REPOSITORY}
            - name: config-git-branch
              value: ${GIT_BRANCH}
            - name: config-git-path
              value: "/deploy-config"

      - apiVersion: triggers.tekton.dev/v1alpha1
        kind: EventListener
        metadata:
          name: ${APP_NAME}-listener
        spec:
          serviceAccountName: pipeline
          triggers:
            - bindings:
              - ref: ${APP_NAME}
              template:
                name: ${APP_NAME}

      - apiVersion: tekton.dev/v1beta1
        kind: TaskRun
        metadata:
          name: create-webhook-${RANDOM_TASK}
        spec:
          taskRef:
            name: create-webhook
          params:
          - name: app-name
            value: ${APP_NAME}
          - name: git-repo-url
            value: ${GIT_REPOSITORY}
          - name: git-branch
            value: ${GIT_BRANCH}

    parameters:
      -
        name: APP_NAME
        required: true
      -
        name: GIT_REPOSITORY
        required: true
      -
        name: GIT_BRANCH
        required: true
        value: "main"
      - 
        name: BUILD_TYPE
        required: true
      -
        name: RANDOM_TASK
        generate: expression
        from: "[a-z0-9]{8}"
